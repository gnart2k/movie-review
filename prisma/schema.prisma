// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AuthorDetails {
  id          String  @id @default(uuid())
  name        String?
  username    String
  avatar_path String?
  rating      Int?

  reviews Review[]
}

model Review {
  id              String        @id @default(uuid())
  filmId          Int
  author          String
  author_details  AuthorDetails @relation(fields: [authorDetailsId], references: [id], onDelete: Cascade)
  authorDetailsId String
  content         String        @db.Text
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  url             String
  comment_evaluation String?      @default("")

  likes ReviewLike[]
}

model ReviewLike {
  id        Int      @id @default(autoincrement())
  userId    String
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, reviewId])
}

model AIReview {
  id        Int      @id @default(autoincrement())
  filmId    Int
  content   String
  createdAt DateTime @default(now())
}

model UserCategoryStats {
  id         Int    @id @default(autoincrement())
  userId     String
  categoryId Int
  count      Int    @default(1)

  @@unique([userId, categoryId])
}

model Movie {
  id            Int      @id
  title         String
  originalTitle String
  releaseDate   DateTime
  runtime       Int?
  overview      String?  @db.Text
  tagline       String?  @db.Text
  status        String?
  popularity    Float
  rating        Float
  voteCount     Int
  posterPath    String?
  backdropPath  String?
  homepage      String?
  originalLang  String   
  budget        Int?
  revenue       Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  movieGenres   MovieGenre[]
  movieKeywords MovieKeyword[]
  movieActors   MovieActor[]
}

model Genre {
  id          Int         @id @unique
  name        String
  movieGenres MovieGenre[]
}

model MovieGenre {
  movieId Int
  genreId Int

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  genre Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([movieId, genreId])
}

model Keyword {
  id            Int            @id @unique
  name          String
  movieKeywords MovieKeyword[]
}

model MovieKeyword {
  movieId   Int
  keywordId Int

  movie   Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  keyword Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@id([movieId, keywordId])
}

model Actor {
  id           Int         @id @unique
  name         String
  originalName String
  gender       Int?
  popularity   Float
  profilePath  String?
  movieActors  MovieActor[]
}

model MovieActor {
  movieId Int
  actorId Int

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@id([movieId, actorId])
}